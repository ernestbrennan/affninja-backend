<?php
declare(strict_types=1);

namespace App\Http\Requests\Statistic;

use App\Http\Requests\Request;
use App\Models\Currency;
use App\Models\Lead;
use Illuminate\Contracts\Validation\Validator;

class GetByLeadRequest extends Request
{
    public function rules(): array
    {
        return [
            'hour' => 'string',
            'flow_hashes' => 'array',
            'flow_hashes.*' => 'exists:flows,hash',
            'offer_hashes' => 'array',
            'offer_hashes.*' => 'exists:offers,hash',
            'offer_ids' => 'array',
            'offer_ids.*' => 'numeric|exists:offers,id',
            'publisher_hashes' => 'array',
            'publisher_hashes.*' => 'string|exists:users,hash',
            'publisher_ids' => 'array',
            'publisher_ids.*' => 'numeric|exists:users,id,role,publisher',
            'advertiser_ids' => 'array',
            'advertiser_ids.*' => 'numeric|exists:users,id,role,advertiser',
            'landing_hashes' => 'array',
            'landing_hashes.*' => 'exists:landings,hash',
            'transit_hashes' => 'array',
            'transit_hashes.*' => 'string',
            'region_id' => 'numeric',
            'city_id' => 'numeric',
            'target_geo_country_ids' => 'array',
            'target_geo_country_ids.*' => 'numeric',
            'country_ids' => 'array',
            'country_ids.*' => 'numeric',
            'lead_statuses' => 'array',
            'lead_statuses.*' => 'in:' . implode(',', [Lead::NEW, Lead::APPROVED, Lead::CANCELLED, Lead::TRASHED,]),
            'sort_by' => 'in:created_at,initialized_at,processed_at',
            'sorting' => 'required_with:sort_by|in:asc,desc',
            'is_autogenerated' => 'in:0,1',
            'search' => 'string',
            'processed_date_from' => 'string',
            'processed_date_to' => 'string',
        ];
    }

    public function moreValidation(Validator $validator)
    {
        $validator->after(function ($validator) {
            $user = \Auth::user();
            if ($user->isAdvertiser()) {
                $rules = [
                    'currency_ids' => 'array',
                    'currency_ids.*' => 'in:' . Currency::PAYOUT_CURRENCIES_STR,
                    'search_field' => 'in:publisher_hash,flow_hash,phone,hash',
                    'group_by' => 'in:created_at,processed_at',
                ];
            } elseif ($user->isAdmin()) {
                $rules = [
                    'currency_ids' => 'array',
                    'currency_ids.*' => 'in:' . Currency::PAYOUT_CURRENCIES_STR,
                    'search_field' => 'in:id,hash,phone,name',
                    'date_filter_column' => 'in:created_at,processed_at',
                ];
            } else if($user->isPublisher()){
                $rules = [
                    'currency_id' => 'required|in:' . Currency::PAYOUT_CURRENCIES_STR,
                ];
            }

            $new_validator = \Validator::make($this->all(), $rules ?? []);

            if ($new_validator->fails()) {
                foreach ($new_validator->errors()->messages() as $error_field => $error) {
                    $validator->errors()->add($error_field, $error);
                }
            }
        });
    }

    protected function getFailedValidationMessage()
    {
        return trans('statistics.on_get_list_error');
    }
}
