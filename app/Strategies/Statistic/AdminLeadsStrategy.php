<?php
declare(strict_types=1);

namespace App\Strategies\Statistic;

use DB;
use Auth;
use App\Models\Currency;
use App\Models\Lead;
use App\Classes\Statistics;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\Request;

class AdminLeadsStrategy implements AbstractStatisticStrategy
{
    /**
     * @var Request
     */
    private $request;

    public function get(Request $request): array
    {
        $this->request = $request;

        $query = Lead::select('leads.*')
            ->createdBetweenDates($request->get('date_from'), $request->get('date_to'))
            ->processedBetweenDates($request->get('processed_date_from'), $request->get('processed_date_to'))
            ->wherePublisher(Auth::user()->id, Auth::user()->role, $request->get('publisher_hashes'))
            ->wherePublisherIds($request->get('publisher_ids'))
            ->whereAdvertiser(Auth::user()->role, Auth::user()->id, $request->get('advertiser_hashes'))
            ->whereAdvertiserIds($request->get('advertiser_ids'))
            ->whereHour($request->get('hour'))
            ->whereFlow($request->get('flow_hashes', []))
            ->whereOffer($request->get('offer_hashes', []))
            ->whereOfferIds($request->get('offer_ids', []))
            ->whereLanding($request->get('landing_hashes', []))
            ->whereTransits($request->get('transit_hashes', []))
            ->whereCountries($request->get('target_geo_country_ids', []))
            ->whereIpCountries($request->get('country_ids', []))
            ->whereRegion($request->get('region_id'))
            ->whereCity($request->get('city_id'))
            ->whereData1($request->get('data1', []))
            ->whereData2($request->get('data2', []))
            ->whereData3($request->get('data3', []))
            ->whereData4($request->get('data4', []))
            ->whereHash($request->get('lead_hashes', ''))
            ->search($request->get('search_field'), $request->get('search'))
            ->whereIsAutogenerated($request->get('is_autogenerated'))
            ->whereCurrencies($request->get('currency_ids', []));

        $page = (int)$this->request->get('page', 1);
        $per_page = (int)$this->request->get('per_page', 20);

        $total_leads = $this->getTotalLeads($query);
        $leads = $this->getLeads($query, $page, $per_page);

        return [
            'data' => $leads,
            'total' => $page === 1 ? $this->getTotal($query) : [],
            'all_loaded' => allEntitiesLoaded($total_leads, $page, $per_page),
        ];
    }

    public function getWithForLeads()
    {
        return [
            'flow' => function ($q) {
                $q->select('id', 'title', 'hash');
            },
            'target' => function ($q) {
                $q->select('id', 'target_template_id', 'locale_id', 'label');
            },
            'target.template',
            'country' => function ($q) {
                $q->select('id', 'title', 'code')->translate();
            },
            'ip_country' => function ($q) {
                $q->select('id', 'title', 'code')->translate();
            },
            'city' => function ($q) {
                $q->select('id', 'country_id', 'title')->translate();
            },
            'offer' => function ($q) {
                $q->select('id', 'title', 'hash');
            },
            'landing' => function ($q) {
                $q->select('id', 'title', 'locale_id');
            },
            'landing.locale' => function ($q) {
                $q->select('id', 'title', 'code');
            },
            'transit' => function ($q) {
                $q->select('id', 'title', 'locale_id');
            },
            'transit.locale' => function ($q) {
                $q->select('id', 'title', 'code');
            },
            'publisher' => function ($q) {
                $q->select('id', 'hash', 'email');
            },
            'advertiser' => function ($q) {
                $q->select('id', 'hash', 'email');
            },
            'integration' => function ($q) {
                $q->select('id', 'title');
            },
            'order' => function ($q) {
                $q->select('id', 'name', 'phone', 'number_type_id', 'is_first_email_notified', 'products');
            },
            'status_log.integration',
            'status_log',
        ];
    }

    private function getTotalLeads(Builder $query)
    {
        $total_leads = clone $query;

        return (int)($total_leads->select(DB::raw('COUNT(*) as `total_leads`'))
                ->when($this->request->input('lead_statuses'), function (Builder $builder) {
                    $builder->whereIn('status', $this->request->input('lead_statuses'));
                })
                ->first()['total_leads'] ?? 0);
    }

    private function getLeads(Builder $query, int $page, int $per_page)
    {
        $leads = clone $query;

        $offset = paginationOffset($page, $per_page);

        return $leads->with($this->getWithForLeads())
            ->when($this->request->input('lead_statuses'), function (Builder $builder) {
                $builder->whereIn('status', $this->request->input('lead_statuses'));
            })
            ->orderBy($this->request->get('sort_by', 'id'), $this->request->get('sorting', 'asc'))
            ->offset($offset)
            ->limit($per_page)
            ->get();
    }

    private function getTotal(Builder $query)
    {
        $total = clone $query;
        $total_result = $total->select(
            DB::raw('COUNT(*) as total_count'),
            DB::raw('SUM(CASE WHEN `currency_id` = ' . Currency::RUB_ID .
                ' THEN `payout` ELSE 0 END) as `rub_total_payout`'),
            DB::raw('SUM(CASE WHEN `currency_id` = ' . Currency::RUB_ID .
                ' THEN `profit` ELSE 0 END) as `rub_total_profit`'),
            DB::raw('SUM(CASE WHEN `currency_id` = ' . Currency::USD_ID .
                ' THEN `payout` ELSE 0 END) as `usd_total_payout`'),
            DB::raw('SUM(CASE WHEN `currency_id` = ' . Currency::USD_ID .
                ' THEN `profit` ELSE 0 END) as `usd_total_profit`'),
            DB::raw('SUM(CASE WHEN `currency_id` = ' . Currency::EUR_ID .
                ' THEN `payout` ELSE 0 END) as` eur_total_payout`'),
            DB::raw('SUM(CASE WHEN `currency_id` = ' . Currency::EUR_ID .
                ' THEN `profit` ELSE 0 END) as `eur_total_profit`'),

            DB::raw("SUM(CASE WHEN `status` = '" . Lead::NEW . "' THEN 1 ELSE 0 END) as `held_count`"),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::NEW . "' AND `currency_id` = " . Currency::RUB_ID .
                ' THEN `payout` ELSE 0 END) as rub_held_payout'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::NEW . "' AND `currency_id` = " . Currency::RUB_ID .
                ' THEN `profit` ELSE 0 END) as rub_held_profit'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::NEW . "' AND `currency_id` = " . Currency::USD_ID .
                ' THEN `payout` ELSE 0 END) as usd_held_payout'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::NEW . "' AND `currency_id` = " . Currency::USD_ID .
                ' THEN `profit` ELSE 0 END) as usd_held_profit'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::NEW . "' AND `currency_id` = " . Currency::EUR_ID .
                ' THEN `payout` ELSE 0 END) as eur_held_payout'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::NEW . "' AND `currency_id` = " . Currency::EUR_ID .
                ' THEN `profit` ELSE 0 END) as eur_held_profit'),

            DB::raw("SUM(CASE WHEN `status` = '" . Lead::APPROVED . "' THEN 1 ELSE 0 END) as approved_count"),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::APPROVED . "' AND `currency_id` = " . Currency::RUB_ID .
                ' THEN `payout` ELSE 0 END) as rub_approved_payout'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::APPROVED . "' AND `currency_id` = " . Currency::RUB_ID .
                ' THEN `profit` ELSE 0 END) as rub_approved_profit'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::APPROVED . "' AND `currency_id` = " . Currency::USD_ID .
                ' THEN `payout` ELSE 0 END) as usd_approved_payout'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::APPROVED . "' AND `currency_id` = " . Currency::USD_ID .
                ' THEN `profit` ELSE 0 END) as usd_approved_profit'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::APPROVED . "' AND `currency_id` = " . Currency::EUR_ID .
                ' THEN `payout` ELSE 0 END) as eur_approved_payout'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::APPROVED . "' AND `currency_id` = " . Currency::EUR_ID .
                ' THEN `profit` ELSE 0 END) as eur_approved_profit'),

            DB::raw("SUM(CASE WHEN `status` = '" . Lead::CANCELLED . "' THEN 1 ELSE 0 END) as cancelled_count"),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::CANCELLED . "' AND `currency_id` = " . Currency::RUB_ID .
                ' THEN `payout` ELSE 0 END) as `rub_cancelled_payout`'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::CANCELLED . "' AND `currency_id` = " . Currency::RUB_ID .
                ' THEN `profit` ELSE 0 END) as `rub_cancelled_profit`'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::CANCELLED . "' AND `currency_id` = " . Currency::USD_ID .
                ' THEN `payout` ELSE 0 END) as `usd_cancelled_payout`'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::CANCELLED . "' AND `currency_id` = " . Currency::USD_ID .
                ' THEN `profit` ELSE 0 END) as `usd_cancelled_profit`'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::CANCELLED . "' AND `currency_id` = " . Currency::EUR_ID .
                ' THEN `payout` ELSE 0 END) as `eur_cancelled_payout`'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::CANCELLED . "' AND `currency_id` = " . Currency::EUR_ID .
                ' THEN `profit` ELSE 0 END) as `eur_cancelled_profit`'),

            DB::raw("SUM(CASE WHEN `status` = '" . Lead::TRASHED . "' THEN 1 ELSE 0 END) as trashed_count"),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::TRASHED . "' AND `currency_id` = " . Currency::RUB_ID .
                ' THEN `payout` ELSE 0 END) as rub_trashed_payout'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::TRASHED . "' AND `currency_id` = " . Currency::RUB_ID .
                ' THEN `profit` ELSE 0 END) as rub_trashed_profit'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::TRASHED . "' AND `currency_id` = " . Currency::USD_ID .
                ' THEN `payout` ELSE 0 END) as usd_trashed_payout'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::TRASHED . "' AND `currency_id` = " . Currency::USD_ID .
                ' THEN `profit` ELSE 0 END) as usd_trashed_profit'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::TRASHED . "' AND `currency_id` = " . Currency::EUR_ID .
                ' THEN `payout` ELSE 0 END) as eur_trashed_payout'),
            DB::raw("SUM(CASE WHEN `status` = '" . Lead::TRASHED . "' AND `currency_id` = " . Currency::EUR_ID .
                ' THEN `profit` ELSE 0 END) as eur_trashed_profit')
        )
            ->first();

        $total = [
            'total_count' => (int)($total_result['total_count'] ?? 0),
            'rub_total_payout' => (float)($total_result['rub_total_payout'] ?? 0),
            'rub_total_profit' => (float)($total_result['rub_total_profit'] ?? 0),
            'usd_total_payout' => (float)($total_result['usd_total_payout'] ?? 0),
            'usd_total_profit' => (float)($total_result['usd_total_profit'] ?? 0),
            'eur_total_payout' => (float)($total_result['eur_total_payout'] ?? 0),
            'eur_total_profit' => (float)($total_result['eur_total_profit'] ?? 0),

            'approved_count' => (int)($total_result['approved_count'] ?? 0),
            'rub_approved_payout' => (float)($total_result['rub_approved_payout'] ?? 0),
            'rub_approved_profit' => (float)($total_result['rub_approved_profit'] ?? 0),
            'usd_approved_payout' => (float)($total_result['usd_approved_payout'] ?? 0),
            'usd_approved_profit' => (float)($total_result['usd_approved_profit'] ?? 0),
            'eur_approved_payout' => (float)($total_result['eur_approved_payout'] ?? 0),
            'eur_approved_profit' => (float)($total_result['eur_approved_profit'] ?? 0),

            'held_count' => (int)($total_result['held_count'] ?? 0),
            'rub_held_payout' => (float)($total_result['rub_held_payout'] ?? 0),
            'rub_held_profit' => (float)($total_result['rub_held_profit'] ?? 0),
            'usd_held_payout' => (float)($total_result['usd_held_payout'] ?? 0),
            'usd_held_profit' => (float)($total_result['usd_held_profit'] ?? 0),
            'eur_held_payout' => (float)($total_result['eur_held_payout'] ?? 0),
            'eur_held_profit' => (float)($total_result['eur_held_profit'] ?? 0),

            'cancelled_count' => (int)($total_result['cancelled_count'] ?? 0),
            'rub_cancelled_payout' => (float)($total_result['rub_cancelled_payout'] ?? 0),
            'rub_cancelled_profit' => (float)($total_result['rub_cancelled_profit'] ?? 0),
            'usd_cancelled_payout' => (float)($total_result['usd_cancelled_payout'] ?? 0),
            'usd_cancelled_profit' => (float)($total_result['usd_cancelled_profit'] ?? 0),
            'eur_cancelled_payout' => (float)($total_result['eur_cancelled_payout'] ?? 0),
            'eur_cancelled_profit' => (float)($total_result['eur_cancelled_profit'] ?? 0),

            'trashed_count' => (int)($total_result['trashed_count'] ?? 0),
            'rub_trashed_payout' => (float)($total_result['rub_trashed_payout'] ?? 0),
            'rub_trashed_profit' => (float)($total_result['rub_trashed_profit'] ?? 0),
            'usd_trashed_payout' => (float)($total_result['usd_trashed_payout'] ?? 0),
            'usd_trashed_profit' => (float)($total_result['usd_trashed_profit'] ?? 0),
            'eur_trashed_payout' => (float)($total_result['eur_trashed_payout'] ?? 0),
            'eur_trashed_profit' => (float)($total_result['eur_trashed_profit'] ?? 0),
        ];

        $held_count = (int)$total['held_count'];
        $approved_count = (int)$total['approved_count'];
        $cancelled_count = (int)$total['cancelled_count'];
        $trashed_count = (int)$total['trashed_count'];

        $total['real_approve'] = Statistics::calculateRealApprove(
            $approved_count,
            $cancelled_count,
            $held_count,
            true
        );
        $total['expected_approve'] = Statistics::calculateExpectedApprove(
            $approved_count,
            $cancelled_count,
            $held_count,
            true
        );
        $total['approve'] = Statistics::calculateApprove(
            $approved_count,
            $cancelled_count,
            $held_count,
            $trashed_count,
            true
        );

        return $total;
    }
}